#! /usr/bin/env python

import argparse
import os
import rospy
import rostopic
import signal
import traceback
from std_msgs.msg import Empty
from roseus_resume.srv import RegisterIntervention, RegisterInterventionResponse

class StopSubscriber(object):
    def __init__(self, pid, ns):
        self.pid = pid
        self.ns = ns
        self.interventions = []
        self.rate = rospy.Rate(10)
        self.stop_sub = rospy.Subscriber(self.ns + '/interrupt',
                                         Empty, self.stop)
        self.resume_sub = rospy.Subscriber(self.ns + '/resume',
                                           Empty, self.resume)
        # Use fixed namespace for 'register_intervention' service
        self.register_srv = rospy.Service('roseus_resume/register_intervention',
                                          RegisterIntervention, self.register)

    def register(self, msg):
        topic_name = rospy.resolve_name(msg.topic)
        message_type, name, _ = rostopic.get_topic_class(topic_name)
        if not message_type:
            rospy.logerr('No such topic: %s' % msg.topic)
            return RegisterInterventionResponse(False)
        try:
            sub = rospy.Subscriber(name, message_type, self.intervention)
            self.interventions.append(sub)
            return RegisterInterventionResponse(True)
        except Exception:
            traceback.print_exc()
            return RegisterInterventionResponse(False)

    def intervention(self, msg=None):
        os.kill(self.pid, signal.SIGUSR1)

    def stop(self, msg=None):
        os.kill(self.pid, signal.SIGINT)

    def resume(self, msg=None):
        os.kill(self.pid, signal.SIGCONT)

    def spin(self):
        while not rospy.is_shutdown():
            try:
                os.kill(self.pid, 0)
            except OSError:
                rospy.logwarn("...Closing")
                exit()
            self.rate.sleep()


def main():
    p = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    p.add_argument("pid", type=int, help="process id")
    p.add_argument("--namespace", "-ns", type=str, help="ROS namespace",
                   default="intervention")
    args = p.parse_args()

    rospy.init_node("stopper" + str(args.pid), disable_signals=True)

    StopInstance = StopSubscriber(args.pid, args.namespace)
    rospy.loginfo("Monitoring pid %d..." % args.pid)
    StopInstance.spin()


if __name__ == '__main__':
    main()
