#! /usr/bin/env python

import os
import rospy
import rostopic
import signal
import traceback
from roseus_resume.srv import RegisterInterruptionProcess
from roseus_resume.srv import RegisterInterruptionProcessResponse
from std_msgs.msg import Empty
from threading import Thread


class StopSubscriber(object):
    def __init__(self, pid, ns):
        if ns.endswith('/'):
            ns = ns[:-1]
        self.pid = pid
        self.ns = ns
        self.rate = rospy.Rate(10)
        self.stop_sub = rospy.Subscriber(self.ns + '/interrupt',
                                         Empty, self.stop)
        self.resume_sub = rospy.Subscriber(self.ns + '/resume',
                                           Empty, self.resume)
        rospy.loginfo("Monitoring pid %d..." % self.pid)

    def unregister(self):
        # Shutdown services and unregister topics
        self.stop_sub.unregister()
        self.resume_sub.unregister()
        # Print message and finish thread
        rospy.logwarn("...Closing pid %d" % self.pid)
        exit()

    def _try_send_signal(self,sig):
        try:
            os.kill(self.pid, sig)
        except OSError:
            self.unregister()

    def stop(self, msg=None):
        self._try_send_signal(signal.SIGINT)

    def resume(self, msg=None):
        self._try_send_signal(signal.SIGCONT)

    def spin(self):
        while not rospy.is_shutdown():
            self._try_send_signal(0)
            self.rate.sleep()


class StopSubscriberThread(Thread):
    def __init__(self, pid, ns):
        Thread.__init__(self)
        self.stop_subscriber_instance = StopSubscriber(pid, ns)

    def run(self):
        self.stop_subscriber_instance.spin()


def register_interruption_process(req):
    res = RegisterInterruptionProcessResponse()
    ns = req.namespace or "intervention"
    pid = req.pid
    # Check if process exists
    try:
        os.kill(pid, 0)
    except OSError:
        rospy.logwarn("PID %d not found!" % pid)
        res.success = False
        return res
    thread = StopSubscriberThread(pid, ns)
    thread.start()

    res.success = True
    return res


def main():
    rospy.init_node("roseus_resume_stop_process")
    rospy.Service(
        "roseus_resume/register_interruption_process",
        RegisterInterruptionProcess,
        register_interruption_process)
    rospy.spin()


if __name__ == '__main__':
    main()
