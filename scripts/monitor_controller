#! /usr/bin/env python

from actionlib_msgs.msg import GoalID
from control_msgs.msg import FollowJointTrajectoryAction
from roseus_resume.msg import ControllerActionStatus
from roseus_resume.srv import GetControllerActionStatus
from roseus_resume.srv import GetControllerActionStatusResponse
from roseus_resume.srv import RegisterControllerMonitor
from roseus_resume.srv import RegisterControllerMonitorResponse
import rospy


class ActionStatus(object):
    def __init__(self, name, goal_msg):
        self.status = ControllerActionStatus(name=name,
                                             id=goal_msg.goal_id,
                                             goal=goal_msg.goal)

    def update(self, feedback_msg):
        self.status.feedback = feedback_msg.feedback


class MonitorController(object):
    def __init__(self, ns):
        if ns.endswith('/'):
            ns = ns[:-1]

        self.active_command = None
        self.ns = ns

        inst = FollowJointTrajectoryAction()

        self.goal_sub = rospy.Subscriber(
            ns + '/goal', type(inst.action_goal), self._goal_cb)
        self.feedback_sub = rospy.Subscriber(
            ns + '/feedback', type(inst.action_feedback), self._feedback_cb)
        self.result_sub = rospy.Subscriber(
            ns + '/result', type(inst.action_result), self._result_cb)
        self.cancel_pub = rospy.Publisher(
            ns + '/cancel', GoalID, queue_size=100)
        rospy.loginfo("Ready to take orders from {}".format(ns))

    def _goal_cb(self, msg):
        self.active_command = ActionStatus(self.ns, msg)

    def _feedback_cb(self, msg):
        ac = self.active_command
        if ac and ac.status.id.id == msg.status.goal_id.id:
            self.active_command.update(msg)

    def _result_cb(self, msg):
        ac = self.active_command
        if ac and ac.status.id.id == msg.status.goal_id.id:
            self.active_command = None

    def interrupt(self, msg=None):
        if self.active_command:
            status = self.active_command.status
            # self.cancel_pub.publish(GoalID())
            rospy.logdebug("Interrupted Action:\n%s" % status.id)
            rospy.logdebug("Interrupted Time: %s" %
                           status.feedback.actual.time_from_start.to_sec())
            return status
        return None


class MonitorAllControllers(object):
    def __init__(self):
        self.controllers = []
        self.register_service = rospy.Service(
            'roseus_resume/register_controller_monitor',
            RegisterControllerMonitor,
            self.register)

    def register(self, req):
        res = RegisterControllerMonitorResponse()
        if not self.controllers:
            # Set namespace
            self.ns = req.namespace or 'roseus_resume'
            if self.ns.endswith('/'):
                self.ns = self.ns[:-1]
            # Initialize controller monitoring instances
            self.controllers = [MonitorController(x) for x in req.controller_topics]
            # Start monitoring service server
            self.interrupt_service = rospy.Service(
                self.ns + '/get_controller_status',
                GetControllerActionStatus,
                self.interrupt_all)
            res.success = True
        else:
            rospy.logwarn("MonitorController already registered!")
            res.success = False
        return res

    def interrupt_all(self, req):
        res = GetControllerActionStatusResponse()
        for c in self.controllers:
            status = c.interrupt()
            if status:
                res.status.append(status)
        return res


def main():
    rospy.init_node("roseus_resume_monitor_controller")
    MonitorAllControllers()
    rospy.spin()


if __name__ == '__main__':
    main()
